# OpenShift provides the oc port-forward command for forwarding a local port to a pod port. This is different from having access to a pod through a service resource:

The port-forwarding mapping exists only on the workstation where the oc client runs, while a service maps a port for all network users.

A service load-balances connections to potentially multiple pods, whereas a port-forwarding mapping forwards connections to a single pod.

When running this command, be sure to leave the terminal window running. Closing the window or canceling the process stops the port mapping.

# Red Hat discourages the use of the NodePort approach to avoid exposing the service to direct connections. Mapping via port-forwarding in OpenShift is considered a more secure alternative.

# When using templates to generate resources, labels are especially useful. A template resource has a labels section separated from the metadata.labels section. Labels defined in the labels section do not apply to the template itself, but are added to every resource generated by the template.

# These are the environment variables generated by Kubernetes for a service:
<SERVICE_NAME>_SERVICE_HOST: Represents the IP address enabled by a service to access a pod.
<SERVICE_NAME>_SERVICE_PORT: Represents the port where the server port is listed.
<SERVICE_NAME>_PORT: Represents the address, port, and protocol provided by the service for external access.
<SERVICE_NAME>_PORT_<PORT_NUMBER>_<PROTOCOL>: Defines an alias for the <SERVICE_NAME>_PORT.
<SERVICE_NAME>_PORT_<PORT_NUMBER>_<PROTOCOL>_PROTO: Identifies the protocol type (TCP or UDP).
<SERVICE_NAME>_PORT_<PORT_NUMBER>_<PROTOCOL>_PORT: Defines an alias for <SERVICE_NAME>_SERVICE_PORT.
<SERVICE_NAME>_PORT_<PORT_NUMBER>_<PROTOCOL>_ADDR: Defines an alias for <SERVICE_NAME>_SERVICE_HOST.

# By default, the template is created under the current project unless you specify a different one using the -n option, as shown in the following example:
oc create -f todo-template.yaml -n openshift

# List available parameters from a template. The first one is using the oc describe command:
oc describe template mysql-persistent -n openshift
The second way is by using the oc process with the --parameters option:
oc process --parameters mysql-persistent -n openshift

# Processing a Template Using the CLI
oc process -f <filename>
oc process -o yaml -f <filename>
oc process <uploaded-template-name>

# Templates often generate resources with configurable attributes that are based on the template parameters. To override a parameter, use the -p option followed by a <name>=<value> pair.

oc process -o yaml -f mysql.yaml \
   -p MYSQL_USER=dev -p MYSQL_PASSWORD=$P4SSD -p MYSQL_DATABASE=bank \
   -p VOLUME_CAPACITY=10Gi > mysqlProcessed.yaml
oc create -f mysqlProcessed.yaml

oc process -f mysql.yaml -p MYSQL_USER=dev \
  -p MYSQL_PASSWORD=$P4SSD -p MYSQL_DATABASE=bank \
  -p VOLUME_CAPACITY=10Gi | oc create -f -

# To use a template in the openshift project to create an application in your project, first export the template:
oc get template mysql-persistent -o yaml -n openshift > mysql-persistent-template.yaml
oc process -f mysql-persistent-template.yaml \
  -p MYSQL_USER=dev -p MYSQL_PASSWORD=$P4SSD -p MYSQL_DATABASE=bank \
  -p VOLUME_CAPACITY=10Gi | oc create -f -

You can also use two slashes (//) to provide the namespace as part of the template name:
oc process openshift//mysql-persistent \
  -p MYSQL_USER=dev -p MYSQL_PASSWORD=$P4SSD -p MYSQL_DATABASE=bank \
  -p VOLUME_CAPACITY=10Gi | oc create -f -

Alternatively, it is possible to create an application using the oc new-app command passing the template name as the --template option argument:
oc new-app --template=mysql-persistent \
 -p MYSQL_USER=dev -p MYSQL_PASSWORD=$P4SSD -p MYSQL_DATABASE=bank \
 -p VOLUME_CAPACITY=10Gi
